{
  "code": "import { Admin, DataAdmin, EventAdmin, TimerAdmin, Tools } from \"./Lwg\";\r\nimport { lwg3D } from \"./Lwg3D\";\r\nimport { _MakeTailor } from \"./_MakeTailor\";\r\nimport { _Res } from \"./_PreLoad\";\r\nexport var _MakePattern;\r\n(function (_MakePattern) {\r\n    let _Event;\r\n    (function (_Event) {\r\n        _Event[\"addTexture2D\"] = \"_MakePattern_addTexture2D\";\r\n        _Event[\"rotateHanger\"] = \"_MakePattern_rotateHanger\";\r\n        _Event[\"moveUltimately\"] = \"_MakePattern_moveUltimately\";\r\n        _Event[\"resetTex\"] = \"_MakePattern_resetTex\";\r\n        _Event[\"changeDir\"] = \"_MakePattern_resetTex\";\r\n        _Event[\"remake\"] = \"_MakePattern_remake\";\r\n        _Event[\"close\"] = \"_MakePattern_close\";\r\n        _Event[\"createImg\"] = \"_MakePattern_createImg\";\r\n        _Event[\"setTexSize\"] = \"_MakePattern_texSize\";\r\n    })(_Event = _MakePattern._Event || (_MakePattern._Event = {}));\r\n    class _Pattern extends DataAdmin._Table {\r\n        constructor() {\r\n            super(...arguments);\r\n            this._classify = {\r\n                general: 'general',\r\n            };\r\n        }\r\n        static _ins() {\r\n            if (!this.ins) {\r\n                this.ins = new _Pattern('_Chartlet', _Res._list.json.MakePattern.url);\r\n                this.ins._pitchClassify = this.ins._classify.general;\r\n                this.ins._arr.push({}, {});\r\n            }\r\n            return this.ins;\r\n        }\r\n    }\r\n    class _Item extends Admin._ObjectBase {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.diffX = 0;\r\n            this.create = false;\r\n        }\r\n        lwgButton() {\r\n            const Icon = this._Owner.getChildByName('Icon');\r\n            this._btnFour(Icon, (e) => {\r\n                this.create = false;\r\n                this.diffX = 0;\r\n                this.fX = e.stageX;\r\n                this._evNotify(_Event.close);\r\n            }, (e) => {\r\n                if (!this.create) {\r\n                    this.diffX = this.fX - e.stageX;\r\n                    if (this.diffX >= 5) {\r\n                        Icon && this._evNotify(_Event.createImg, [this._Owner['_dataSource']['name'], this._gPoint]);\r\n                        this.create = true;\r\n                    }\r\n                }\r\n            }, () => {\r\n                this.create = true;\r\n            }, () => {\r\n                this.create = true;\r\n            });\r\n        }\r\n    }\r\n    _MakePattern._Item = _Item;\r\n    class MakePattern extends Admin._SceneBase {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.Tex = {\r\n                Img: null,\r\n                DisImg: null,\r\n                imgWH: [128, 128],\r\n                touchP: null,\r\n                diffP: null,\r\n                dir: 'Front',\r\n                dirType: {\r\n                    Front: 'Front',\r\n                    Reverse: 'Reverse',\r\n                },\r\n                state: 'none',\r\n                stateType: {\r\n                    none: 'none',\r\n                    move: 'move',\r\n                    scale: 'scale',\r\n                    rotate: 'rotate',\r\n                    addTex: 'addTex',\r\n                },\r\n                createImg: (name, gPoint) => {\r\n                    this.Tex.DisImg && this.Tex.DisImg.destroy();\r\n                    this.Tex.DisImg = new Laya.Image;\r\n                    this.Tex.Img = new Laya.Image;\r\n                    let lPoint = this._SpriteVar('Ultimately').globalToLocal(gPoint);\r\n                    this.Tex.Img.skin = this.Tex.DisImg.skin = `Game/UI/MakePattern/general/${name}.png`;\r\n                    this.Tex.Img.x = this.Tex.DisImg.x = lPoint.x;\r\n                    this.Tex.Img.y = this.Tex.DisImg.y = lPoint.y;\r\n                    this.Tex.Img.width = this.Tex.DisImg.width = this.Tex.imgWH[0];\r\n                    this.Tex.Img.height = this.Tex.DisImg.height = this.Tex.imgWH[1];\r\n                    this.Tex.Img.pivotX = this.Tex.Img.pivotY = this.Tex.DisImg.pivotX = this.Tex.DisImg.pivotY = 64;\r\n                    this._SpriteVar('Dispaly').addChild(this.Tex.DisImg);\r\n                    this._SpriteVar('Dispaly').visible = true;\r\n                    this.Tex.restore();\r\n                },\r\n                getTex: () => {\r\n                    let ImgF = this._ImgVar(this.Tex.dirType.Front);\r\n                    let ImgR = this._ImgVar(this.Tex.dirType.Reverse);\r\n                    let arr = [\r\n                        ImgF.drawToTexture(ImgF.width, ImgF.height, ImgF.x, ImgF.y + ImgF.height),\r\n                        ImgR.drawToTexture(ImgR.width, ImgR.height, ImgR.x, ImgR.y + ImgR.height)\r\n                    ];\r\n                    return arr;\r\n                },\r\n                checkDir: () => {\r\n                    if (0 <= _MakePattern._HangerSimRY && _MakePattern._HangerSimRY < 180) {\r\n                        this.Tex.dir = this.Tex.dirType.Front;\r\n                    }\r\n                    else {\r\n                        this.Tex.dir = this.Tex.dirType.Reverse;\r\n                    }\r\n                },\r\n                setImgPos: () => {\r\n                    let posArr = this.Tex.setPosArr();\r\n                    let indexArr = [];\r\n                    let fOutArr = [];\r\n                    let rOutArr = [];\r\n                    for (let index = 0; index < posArr.length; index++) {\r\n                        let gPoint = this._SpriteVar('Wireframe').localToGlobal(new Laya.Point(posArr[index].x, posArr[index].y));\r\n                        let _outF = Tools._3D.rayScanning(_MakePattern._MainCamara, _MakePattern._Scene3D, new Laya.Vector2(gPoint.x, gPoint.y), _MakePattern._Front.name);\r\n                        _outF && fOutArr.push(_outF);\r\n                        let _outR = Tools._3D.rayScanning(_MakePattern._MainCamara, _MakePattern._Scene3D, new Laya.Vector2(gPoint.x, gPoint.y), _MakePattern._Reverse.name);\r\n                        _outR && rOutArr.push(_outR);\r\n                        if (_outF || _outR) {\r\n                            indexArr.push(posArr[index]);\r\n                        }\r\n                    }\r\n                    if (indexArr.length !== 0) {\r\n                        let out;\r\n                        if (fOutArr.length == rOutArr.length) {\r\n                            this.Tex.checkDir();\r\n                        }\r\n                        else if (fOutArr.length > rOutArr.length) {\r\n                            this.Tex.dir = this.Tex.dirType.Front;\r\n                        }\r\n                        else if (fOutArr.length < rOutArr.length) {\r\n                            this.Tex.dir = this.Tex.dirType.Reverse;\r\n                        }\r\n                        if (this.Tex.dir == this.Tex.dirType.Front) {\r\n                            out = fOutArr[fOutArr.length - 1];\r\n                        }\r\n                        else {\r\n                            out = rOutArr[rOutArr.length - 1];\r\n                        }\r\n                        this._SpriteVar(this.Tex.dir).addChild(this.Tex.Img);\r\n                        Tools._Node.changePivot(this.Tex.Img, indexArr[indexArr.length - 1].x, indexArr[indexArr.length - 1].y);\r\n                        let _width = this._ImgVar(this.Tex.dir).width;\r\n                        let _height = this._ImgVar(this.Tex.dir).height;\r\n                        let angleXZ = Tools._Point.pointByAngle(_MakePattern._HangerP.transform.position.x - out.point.x, _MakePattern._HangerP.transform.position.z - out.point.z);\r\n                        let _angleY;\r\n                        if (this.Tex.dir == this.Tex.dirType.Front) {\r\n                            _angleY = angleXZ + _MakePattern._HangerSimRY;\r\n                        }\r\n                        else {\r\n                            _angleY = angleXZ + _MakePattern._HangerSimRY - 180;\r\n                        }\r\n                        this.Tex.Img.x = _width - _width / 180 * (_angleY);\r\n                        let pH = out.point.y - _MakePattern._HangerP.transform.position.y;\r\n                        let _DirHeight = Tools._3D.getMeshSize(this.Tex.dir == this.Tex.dirType.Front ? _MakePattern._Front : _MakePattern._Reverse).y;\r\n                        let ratio = 1 - pH / _DirHeight;\r\n                        this.Tex.Img.y = ratio * _height + this._ImgVar('Wireframe').height / 2 * ratio;\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        return false;\r\n                    }\r\n                },\r\n                setPosArr: () => {\r\n                    let x = this._ImgVar('Frame').x;\r\n                    let y = this._ImgVar('Frame').y;\r\n                    let _width = this._ImgVar('Frame').width;\r\n                    let _height = this._ImgVar('Frame').height;\r\n                    return [\r\n                        new Laya.Point(0, 0),\r\n                        new Laya.Point(0, _height / 2),\r\n                        new Laya.Point(_width, _height / 2),\r\n                        new Laya.Point(_width, 0),\r\n                        new Laya.Point(_width / 2, 0),\r\n                        new Laya.Point(_width / 2, _height),\r\n                        new Laya.Point(_width * 1 / 4, _height * 3 / 4),\r\n                        new Laya.Point(_width * 3 / 4, _height * 1 / 4),\r\n                        new Laya.Point(_width / 2, _height / 2),\r\n                        new Laya.Point(_width * 1 / 4, _height * 1 / 4),\r\n                        new Laya.Point(_width * 3 / 4, _height * 3 / 4),\r\n                        new Laya.Point(x, _height),\r\n                        new Laya.Point(_width, _height),\r\n                    ];\r\n                },\r\n                crashType: {\r\n                    setImgPos: 'setImgPos',\r\n                    enter: 'enter',\r\n                    inside: 'inside',\r\n                },\r\n                checkInside: () => {\r\n                    this.Tex.checkDir();\r\n                    let posArr = this.Tex.setPosArr();\r\n                    let fOutArr = [];\r\n                    let rOutArr = [];\r\n                    for (let index = 0; index < posArr.length; index++) {\r\n                        let gPoint = this._SpriteVar('Wireframe').localToGlobal(new Laya.Point(posArr[index].x, posArr[index].y));\r\n                        let _outF = Tools._3D.rayScanning(_MakePattern._MainCamara, _MakePattern._Scene3D, new Laya.Vector2(gPoint.x, gPoint.y), _MakePattern._Front.name);\r\n                        _outF && fOutArr.push(_outF);\r\n                        let _outR = Tools._3D.rayScanning(_MakePattern._MainCamara, _MakePattern._Scene3D, new Laya.Vector2(gPoint.x, gPoint.y), _MakePattern._Reverse.name);\r\n                        _outR && rOutArr.push(_outR);\r\n                    }\r\n                    if (fOutArr.length !== 0 || rOutArr.length !== 0) {\r\n                        return true;\r\n                    }\r\n                    else {\r\n                        return false;\r\n                    }\r\n                },\r\n                getDisGP: () => {\r\n                    return this.Tex.DisImg ? this._SpriteVar('Dispaly').localToGlobal(new Laya.Point(this.Tex.DisImg.x, this.Tex.DisImg.y)) : null;\r\n                },\r\n                disMove: () => {\r\n                    this.Tex.DisImg.x += this.Tex.diffP.x;\r\n                    this.Tex.DisImg.y += this.Tex.diffP.y;\r\n                    let gPoint = this.Tex.getDisGP();\r\n                    this._ImgVar('Wireframe').pos(gPoint.x, gPoint.y);\r\n                },\r\n                move: (e) => {\r\n                    this.Tex.disMove();\r\n                    this._ImgVar('Wireframe').visible = false;\r\n                    if (this.Tex.checkInside()) {\r\n                        this.Tex.setImgPos();\r\n                        this._ImgVar('Wireframe').visible = true;\r\n                        this.Tex.state = this.Tex.stateType.addTex;\r\n                        this._SpriteVar('Dispaly').visible = false;\r\n                    }\r\n                },\r\n                addTex: (e) => {\r\n                    this.Tex.disMove();\r\n                    let out = this.Tex.setImgPos();\r\n                    if (!out) {\r\n                        this._ImgVar('Wireframe').visible = false;\r\n                        this.Tex.state = this.Tex.stateType.move;\r\n                        this.Tex.Img.x = Laya.stage.width;\r\n                        this._SpriteVar('Dispaly').visible = true;\r\n                    }\r\n                    EventAdmin._notify(_Event.addTexture2D, this.Tex.getTex());\r\n                },\r\n                scale: (e) => {\r\n                    let lPoint = this._ImgVar('Wireframe').globalToLocal(new Laya.Point(e.stageX, e.stageY));\r\n                    this._ImgVar('Frame').width = this._ImgVar('WConversion').x = lPoint.x;\r\n                    this._ImgVar('Frame').height = this._ImgVar('WConversion').y = lPoint.y;\r\n                    let gPoint = this._Owner.localToGlobal(new Laya.Point(this._ImgVar('Wireframe').x, this._ImgVar('Wireframe').y));\r\n                    this.Tex.Img.rotation = this.Tex.DisImg.rotation = this._ImgVar('Wireframe').rotation = Tools._Point.pointByAngle(e.stageX - gPoint.x, e.stageY - gPoint.y) + 45;\r\n                    let scaleWidth = this._ImgVar('Frame').width - this._ImgVar('Wireframe').width;\r\n                    let scaleheight = this._ImgVar('Frame').height - this._ImgVar('Wireframe').height;\r\n                    this.Tex.DisImg.width = this.Tex.Img.width = this.Tex.imgWH[0] + scaleWidth;\r\n                    this.Tex.DisImg.height = this.Tex.Img.height = this.Tex.imgWH[1] + scaleheight;\r\n                    Tools._Node.changePivot(this._ImgVar('Wireframe'), this._ImgVar('Frame').width / 2, this._ImgVar('Frame').height / 2);\r\n                    Tools._Node.changePivotCenter(this.Tex.Img);\r\n                    Tools._Node.changePivotCenter(this.Tex.DisImg);\r\n                    this.Tex.setImgPos();\r\n                    EventAdmin._notify(_Event.addTexture2D, this.Tex.getTex());\r\n                },\r\n                rotate: (e) => {\r\n                    if (this.Tex.diffP.x > 0) {\r\n                        EventAdmin._notify(_Event.rotateHanger, [1]);\r\n                    }\r\n                    else {\r\n                        EventAdmin._notify(_Event.rotateHanger, [0]);\r\n                    }\r\n                },\r\n                none: () => {\r\n                    return;\r\n                },\r\n                operation: (e) => {\r\n                    if (this.Tex.touchP) {\r\n                        this.Tex.diffP = new Laya.Point(e.stageX - this.Tex.touchP.x, e.stageY - this.Tex.touchP.y);\r\n                        this.Tex[this.Tex.state](e);\r\n                        this.Tex.touchP = new Laya.Point(e.stageX, e.stageY);\r\n                    }\r\n                },\r\n                restore: () => {\r\n                    this._ImgVar('Wireframe').rotation = 0;\r\n                    this._ImgVar('Wireframe').pivotX = this._ImgVar('Wireframe').width / 2;\r\n                    this._ImgVar('Wireframe').pivotY = this._ImgVar('Wireframe').height / 2;\r\n                    this._ImgVar('WConversion').x = this._ImgVar('Frame').width = this._ImgVar('Wireframe').width;\r\n                    this._ImgVar('WConversion').y = this._ImgVar('Frame').height = this._ImgVar('Wireframe').height;\r\n                    this._ImgVar('Wireframe').visible = false;\r\n                },\r\n                close: () => {\r\n                    this.Tex.restore();\r\n                    this.Tex.DisImg && this.Tex.DisImg.destroy();\r\n                    this.Tex.Img && this.Tex.Img.destroy();\r\n                    this.Tex.state = this.Tex.stateType.none;\r\n                    this.Tex.touchP = null;\r\n                    EventAdmin._notify(_Event.addTexture2D, this.Tex.getTex());\r\n                },\r\n                btn: () => {\r\n                    this._btnFour(this._ImgVar('WConversion'), (e) => {\r\n                        e.stopPropagation();\r\n                        this.Tex.state = this.Tex.stateType.scale;\r\n                    }, null, (e) => {\r\n                        e.stopPropagation();\r\n                        this.Tex.state = this.Tex.stateType.addTex;\r\n                    });\r\n                    this._btnUp(this._ImgVar('WClose'), (e) => {\r\n                        e.stopPropagation();\r\n                        this.Tex.close();\r\n                    });\r\n                    this._btnFour(this._ImgVar('BtnL'), (e) => {\r\n                        this._ImgVar('Wireframe').visible = false;\r\n                        this.Tex.state = this.Tex.stateType.rotate;\r\n                        TimerAdmin._frameLoop(1, this._ImgVar('BtnL'), () => {\r\n                            EventAdmin._notify(_Event.rotateHanger, [0]);\r\n                        });\r\n                    }, null, () => {\r\n                        Laya.timer.clearAll(this._ImgVar('BtnL'));\r\n                    }, () => {\r\n                        Laya.timer.clearAll(this._ImgVar('BtnL'));\r\n                    });\r\n                    this._btnFour(this._ImgVar('BtnR'), (e) => {\r\n                        this._ImgVar('Wireframe').visible = false;\r\n                        this.Tex.state = this.Tex.stateType.rotate;\r\n                        TimerAdmin._frameLoop(1, this._ImgVar('BtnR'), () => {\r\n                            EventAdmin._notify(_Event.rotateHanger, [1]);\r\n                        });\r\n                    }, null, () => {\r\n                        Laya.timer.clearAll(this._ImgVar('BtnR'));\r\n                    }, () => {\r\n                        Laya.timer.clearAll(this._ImgVar('BtnR'));\r\n                    });\r\n                }\r\n            };\r\n        }\r\n        lwgOnAwake() {\r\n            _Pattern._ins()._List = this._ListVar('List');\r\n            _Pattern._ins()._List.scrollBar.touchScrollEnable = false;\r\n            _Pattern._ins()._List.scrollBar.autoHide = true;\r\n            _Pattern._ins()._listRender = (Cell, index) => {\r\n                const data = Cell.dataSource;\r\n                const Icon = Cell.getChildByName('Icon');\r\n                if (data['name']) {\r\n                    Icon.skin = `Game/UI/MakePattern/${_Pattern._ins()._pitchClassify}/${data['name']}_icon.png`;\r\n                }\r\n                else {\r\n                    Icon.skin = null;\r\n                }\r\n                const Board = Cell.getChildByName('Board');\r\n                Board.skin = `Lwg/UI/ui_orthogon_green.png`;\r\n            };\r\n        }\r\n        lwgAdaptive() {\r\n            this._adaWidth([this._ImgVar('BtnR'), this._ImgVar('BtnL')]);\r\n        }\r\n        lwgOnStart() {\r\n            for (let index = 0; index < _Pattern._ins()._List.cells.length; index++) {\r\n                let Cell = _Pattern._ins()._List.cells[index];\r\n                if (!Cell.getComponent(_Item)) {\r\n                    Cell.addComponent(_Item);\r\n                }\r\n            }\r\n            _MakePattern._Scene3D = _Res._list.scene3D.MakeClothes.Scene;\r\n            if (!_MakePattern._Scene3D.getComponent(MakeClothes3D)) {\r\n                _MakePattern._Scene3D.addComponent(MakeClothes3D);\r\n            }\r\n            else {\r\n                _MakePattern._Scene3D.getComponent(MakeClothes3D).lwgOnStart();\r\n            }\r\n            let clothesName = _MakeTailor._DIYClothes._ins()._pitchName;\r\n            const name0 = clothesName.substr(0, clothesName.length - 5);\r\n            this._ImgVar('Front').loadImage(`Game/UI/MakePattern/basic/${name0}basic.png`, Laya.Handler.create(this, () => {\r\n                this._ImgVar('Reverse').loadImage(`Game/UI/MakePattern/basic/${name0}basic.png`, Laya.Handler.create(this, () => {\r\n                    EventAdmin._notify(_Event.remake, this.Tex.getTex());\r\n                    EventAdmin._notify(_Event.addTexture2D, this.Tex.getTex());\r\n                }));\r\n            }));\r\n        }\r\n        photo() {\r\n            _MakePattern._Hanger.transform.localRotationEulerY = 180;\r\n            this.EndCamera = _MakePattern._MainCamara.clone();\r\n            _MakePattern._Scene3D.addChild(this.EndCamera);\r\n            this.EndCamera.transform.position = _MakePattern._MainCamara.transform.position;\r\n            this.EndCamera.transform.localRotationEuler = _MakePattern._MainCamara.transform.localRotationEuler;\r\n            this.EndCamera.renderTarget = new Laya.RenderTexture(this._SpriteVar('IconPhorto').width, this._SpriteVar('IconPhorto').height);\r\n            this.EndCamera.renderingOrder = -1;\r\n            this.EndCamera.clearFlag = Laya.CameraClearFlags.Sky;\r\n            var rtex = new Laya.Texture(this.EndCamera.renderTarget, Laya.Texture.DEF_UV);\r\n            this._SpriteVar('IconPhorto').graphics.drawTexture(rtex);\r\n            TimerAdmin._frameOnce(10, this, () => {\r\n                const htmlCanvas1 = this._SpriteVar('IconPhorto').drawToCanvas(this._SpriteVar('IconPhorto').width, this._SpriteVar('IconPhorto').height, this._SpriteVar('IconPhorto').x, this._SpriteVar('IconPhorto').y);\r\n                let base64 = htmlCanvas1.toBase64(\"image/png\", 1);\r\n                _MakeTailor._DIYClothes._ins()._setPitchProperty(_MakeTailor._DIYClothes._ins()._otherPro.completeSkin, base64);\r\n                this.EndCamera.destroy();\r\n                this._openScene('DressingRoom', true, true);\r\n            });\r\n        }\r\n        lwgEvent() {\r\n            this._evReg(_Event.createImg, (name, gPoint) => {\r\n                this.Tex.state = this.Tex.stateType.move;\r\n                this.Tex.createImg(name, gPoint);\r\n            });\r\n            this._evReg(_Event.close, () => {\r\n                if (this.Tex.checkInside()) {\r\n                    this.Tex.restore();\r\n                }\r\n                else {\r\n                    this.Tex.close();\r\n                }\r\n                this.Tex.state = this.Tex.stateType.none;\r\n            });\r\n            this._evReg(_Event.setTexSize, (_height) => {\r\n                this._SpriteVar('Front').height = this._ImgVar('Reverse').height = _height;\r\n                this._SpriteVar('Front').y = this._ImgVar('Reverse').y = _height;\r\n            });\r\n        }\r\n        lwgButton() {\r\n            this.UI = new _MakeTailor._UI(this._Owner);\r\n            this.UI.BtnAgain.pos(86, 630);\r\n            TimerAdmin._frameOnce(10, this, () => {\r\n                this.UI.operationAppear();\r\n                this.UI.btnBackAppear(null, 200);\r\n                this.UI.btnCompleteAppear(null, 400);\r\n                this.UI.btnRollbackAppear(null, 600);\r\n                this.UI.btnAgainAppear(null, 800);\r\n            });\r\n            this.UI.btnCompleteClick = () => {\r\n                this.UI.operationVinish(() => {\r\n                    this.UI.btnBackVinish();\r\n                    this.UI.btnRollbackVinish();\r\n                    this.UI.btnAgainVinish(() => {\r\n                        this.photo();\r\n                    });\r\n                }, 200);\r\n            };\r\n            this.UI.btnRollbackClick = () => {\r\n                this._openScene('MakeTailor', true, true);\r\n            };\r\n            this.Tex.btn();\r\n        }\r\n        onStageMouseDown(e) {\r\n            this.Tex.touchP = new Laya.Point(e.stageX, e.stageY);\r\n            if (e.stageX > Laya.stage.width - this.UI.Operation.width) {\r\n                this['slideFY'] = e.stageY;\r\n            }\r\n        }\r\n        onStageMouseMove(e) {\r\n            this.Tex.operation(e);\r\n            if (e.stageX > Laya.stage.width - this.UI.Operation.width) {\r\n                if (this['slideFY']) {\r\n                    let diffY = this['slideFY'] - e.stageY;\r\n                    let index = _Pattern._ins()._List.startIndex;\r\n                    if (Math.abs(diffY) > 25) {\r\n                        if (diffY > 0) {\r\n                            _Pattern._ins()._List.tweenTo(index + 1, 100);\r\n                        }\r\n                        if (diffY < 0) {\r\n                            _Pattern._ins()._List.tweenTo(index - 1, 100);\r\n                        }\r\n                        this['slideFY'] = null;\r\n                    }\r\n                }\r\n            }\r\n            else {\r\n                this['slideFY'] = null;\r\n            }\r\n        }\r\n        onStageMouseUp(e) {\r\n            this['slideFY'] = null;\r\n            if (e.stageX > Laya.stage.width - this.UI.Operation.width) {\r\n                this._evNotify(_Event.close);\r\n            }\r\n            else {\r\n                if (!this.Tex.checkInside()) {\r\n                    this.Tex.close();\r\n                }\r\n                else {\r\n                }\r\n            }\r\n        }\r\n        lwgCloseAni() {\r\n            return 10;\r\n        }\r\n    }\r\n    _MakePattern.MakePattern = MakePattern;\r\n    _MakePattern._HangerSimRY = 90;\r\n    class MakeClothes3D extends lwg3D._Scene3DBase {\r\n        lwgOnAwake() {\r\n            _MakePattern._MainCamara = this._MainCamera;\r\n        }\r\n        lwgOnStart() {\r\n        }\r\n        lwgEvent() {\r\n            this._evReg(_Event.remake, () => {\r\n                _MakePattern._HangerP = this._Child('HangerP');\r\n                _MakePattern._Role = _MakePattern._Scene3D.getChildByName('Role');\r\n                const Classify = _MakePattern._Role.getChildByName(_MakeTailor._DIYClothes._ins()._pitchClassify);\r\n                Tools._Node.showExcludedChild3D(_MakePattern._Role, [Classify.name]);\r\n                _MakePattern._Hanger = Classify.getChildByName(_MakeTailor._DIYClothes._ins()._pitchName);\r\n                Tools._Node.showExcludedChild3D(Classify, [_MakePattern._Hanger.name]);\r\n                _MakePattern._Hanger.transform.localRotationEulerY = 180;\r\n                _MakePattern._Front = _MakePattern._Hanger.getChildByName(`${_MakePattern._Hanger.name}_0`);\r\n                _MakePattern._Reverse = _MakePattern._Hanger.getChildByName(`${_MakePattern._Hanger.name}_1`);\r\n                let center = _MakePattern._Front.meshRenderer.bounds.getCenter();\r\n                let extent = _MakePattern._Front.meshRenderer.bounds.getExtent();\r\n                let p1 = new Laya.Vector3(center.x, center.y + extent.y, center.z);\r\n                let p2 = new Laya.Vector3(center.x, center.y - extent.y, center.z);\r\n                let point1 = Tools._3D.posToScreen(p1, _MakePattern._MainCamara);\r\n                let point2 = Tools._3D.posToScreen(p2, _MakePattern._MainCamara);\r\n                this._evNotify(_Event.setTexSize, [point2.y - point1.y]);\r\n            });\r\n            this._evReg(_Event.addTexture2D, (Text2DF, Text2DR) => {\r\n                const bMF = _MakePattern._Front.meshRenderer.material;\r\n                bMF.albedoTexture.destroy();\r\n                bMF.albedoTexture = Text2DF;\r\n                const bMR = _MakePattern._Reverse.meshRenderer.material;\r\n                bMR.albedoTexture.destroy();\r\n                bMR.albedoTexture = Text2DR;\r\n            });\r\n            this._evReg(_Event.rotateHanger, (num) => {\r\n                if (num == 1) {\r\n                    _MakePattern._Hanger.transform.localRotationEulerY++;\r\n                    _MakePattern._HangerSimRY += 2;\r\n                    if (_MakePattern._HangerSimRY > 360) {\r\n                        _MakePattern._HangerSimRY = 0;\r\n                    }\r\n                }\r\n                else {\r\n                    _MakePattern._Hanger.transform.localRotationEulerY--;\r\n                    _MakePattern._HangerSimRY -= 2;\r\n                    if (_MakePattern._HangerSimRY < 0) {\r\n                        _MakePattern._HangerSimRY = 359;\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    }\r\n    _MakePattern.MakeClothes3D = MakeClothes3D;\r\n})(_MakePattern || (_MakePattern = {}));\r\nexport default _MakePattern.MakePattern;\r\n",
  "references": [
    "D:/Game/project/3DDressUp/Project_Laya2.9.0/3DDressUp_Laya2.9.0/3DDressUp_Laya2.9.0/src/script/TJ/Admanager.ts",
    "D:/Game/project/3DDressUp/Project_Laya2.9.0/3DDressUp_Laya2.9.0/3DDressUp_Laya2.9.0/src/script/Lwg/Lwg.ts",
    "D:/Game/project/3DDressUp/Project_Laya2.9.0/3DDressUp_Laya2.9.0/3DDressUp_Laya2.9.0/src/script/Lwg/Lwg3D.ts",
    "D:/Game/project/3DDressUp/Project_Laya2.9.0/3DDressUp_Laya2.9.0/3DDressUp_Laya2.9.0/src/script/Lwg/_MakeTailor.ts",
    "D:/Game/project/3DDressUp/Project_Laya2.9.0/3DDressUp_Laya2.9.0/3DDressUp_Laya2.9.0/src/script/Lwg/_MakeUp.ts",
    "D:/Game/project/3DDressUp/Project_Laya2.9.0/3DDressUp_Laya2.9.0/3DDressUp_Laya2.9.0/src/script/Lwg/_PreLoad.ts"
  ]
}
