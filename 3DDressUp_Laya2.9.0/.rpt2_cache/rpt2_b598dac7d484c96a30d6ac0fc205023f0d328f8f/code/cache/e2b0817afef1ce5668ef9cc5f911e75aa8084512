{
  "code": "import { Admin, Animation2D, Click, DataAdmin, Effects, EventAdmin, TimerAdmin, Tools } from \"./Lwg\";\r\nimport { _Res } from \"./_PreLoad\";\r\nexport var _MakeTailor;\r\n(function (_MakeTailor) {\r\n    let _Event;\r\n    (function (_Event) {\r\n        _Event[\"scissorTrigger\"] = \"_MakeTailor_ scissorTrigger\";\r\n        _Event[\"completeEffc\"] = \"_MakeTailor_completeAni\";\r\n        _Event[\"changeClothes\"] = \"_MakeTailor_changeClothes\";\r\n        _Event[\"scissorAppear\"] = \"_MakeTailor_scissorAppear\";\r\n        _Event[\"scissorPlay\"] = \"_MakeTailor_scissorPlay\";\r\n        _Event[\"scissorStop\"] = \"_MakeTailor_scissorStop\";\r\n        _Event[\"scissorRotation\"] = \"_MakeTailor_scissorRotation\";\r\n        _Event[\"scissorAgain\"] = \"_MakeTailor_scissorSitu\";\r\n        _Event[\"scissorRemove\"] = \"_MakeTailor_scissorRemove\";\r\n    })(_Event = _MakeTailor._Event || (_MakeTailor._Event = {}));\r\n    class _Clothes extends DataAdmin._Table {\r\n        constructor() {\r\n            super(...arguments);\r\n            this._classify = {\r\n                Dress: 'Dress',\r\n                Top: 'Top',\r\n                Bottoms: 'Bottoms',\r\n            };\r\n        }\r\n        static _ins() {\r\n            if (!this.ins) {\r\n                this.ins = new _Clothes('DIY_Data', _Res._list.json.Clothes.url);\r\n                this.ins._pitchClassify = this.ins._classify.Dress;\r\n                this.ins._arr = this.ins._getArrByClassify(this.ins._pitchClassify);\r\n                if (!this.ins._pitchName) {\r\n                    this.ins._pitchName = this.ins._arr[0][this.ins._property.name];\r\n                }\r\n            }\r\n            return this.ins;\r\n        }\r\n        getClothesArr() {\r\n            if (!this.ClothesArr) {\r\n                this.ClothesArr = [];\r\n                const dataArr = _Clothes._ins()._arr;\r\n                for (let index = 0; index < dataArr.length; index++) {\r\n                    let CloBox = this.createClothes(`${dataArr[index]['name']}`);\r\n                    this.ClothesArr.push(CloBox);\r\n                }\r\n            }\r\n            return this.ClothesArr;\r\n        }\r\n        createClothes(name, Scene) {\r\n            const Cloth = Tools._Node.createPrefab(_Res._list.prefab2D[name]['prefab']);\r\n            const CloBox = new Laya.Sprite;\r\n            CloBox.width = Laya.stage.width;\r\n            CloBox.height = Laya.stage.height;\r\n            CloBox.pivotX = CloBox.width / 2;\r\n            CloBox.pivotY = CloBox.height / 2;\r\n            CloBox.x = Laya.stage.width / 2;\r\n            CloBox.y = Laya.stage.height / 2;\r\n            CloBox.addChild(Cloth);\r\n            CloBox.name = Cloth.name;\r\n            if (Scene) {\r\n                Scene.addChild(CloBox);\r\n                CloBox.zOrder = 20;\r\n            }\r\n            return CloBox;\r\n        }\r\n    }\r\n    _MakeTailor._Clothes = _Clothes;\r\n    class _TaskClothes extends DataAdmin._Table {\r\n        static _ins() {\r\n            if (!this.ins) {\r\n                this.ins = new _TaskClothes('DIY_Task');\r\n            }\r\n            return this.ins;\r\n        }\r\n        again(Scene) {\r\n            const clothesArr = _Clothes._ins().getClothesArr();\r\n            const name = _Clothes._ins()._pitchName ? _Clothes._ins()._pitchName : clothesArr[0]['name'];\r\n            let CloBoxOld;\r\n            for (let index = 0; index < clothesArr.length; index++) {\r\n                const element = clothesArr[index];\r\n                if (element.name == name) {\r\n                    CloBoxOld = element;\r\n                    clothesArr[index] = this.Clothes = _Clothes._ins().createClothes(name, Scene);\r\n                    this.LineParent = this.Clothes.getChildAt(0).getChildByName('LineParent');\r\n                    this.setData();\r\n                }\r\n            }\r\n            const time = 500;\r\n            this.Clothes.pos(0, -Laya.stage.height);\r\n            this.Clothes && Animation2D.move_rotate(this.Clothes, 0, new Laya.Point(Laya.stage.width / 2, Laya.stage.height / 2), time);\r\n            Animation2D.move_rotate(CloBoxOld, 0, new Laya.Point(Laya.stage.width, Laya.stage.height), time, 0, () => {\r\n                CloBoxOld.removeSelf();\r\n            });\r\n        }\r\n        changeClothes(Scene) {\r\n            const time = 500;\r\n            const clothesArr = _Clothes._ins().getClothesArr();\r\n            const name = _Clothes._ins()._pitchName ? _Clothes._ins()._pitchName : clothesArr[0]['name'];\r\n            const lastName = _Clothes._ins()._lastPitchName;\r\n            for (let index = 0; index < clothesArr.length; index++) {\r\n                const element = clothesArr[index];\r\n                if (element.name == name) {\r\n                    element.removeSelf();\r\n                    this.Clothes = clothesArr[index] = _Clothes._ins().createClothes(name, Scene);\r\n                    this.LineParent = this.Clothes.getChildAt(0).getChildByName('LineParent');\r\n                    this.setData();\r\n                }\r\n                else if (element.name == lastName) {\r\n                    this.LastClothes = element;\r\n                }\r\n                else {\r\n                    element.removeSelf();\r\n                }\r\n            }\r\n            if (this.LastClothes) {\r\n                this.Clothes.pos(0, -Laya.stage.height);\r\n                this.Clothes && Animation2D.move_rotate(this.Clothes, 0, new Laya.Point(Laya.stage.width / 2, Laya.stage.height / 2), time);\r\n                Animation2D.move_rotate(this.LastClothes, 0, new Laya.Point(Laya.stage.width, -Laya.stage.height), time, 0, () => {\r\n                    this.LastClothes.removeSelf();\r\n                });\r\n            }\r\n        }\r\n        setData() {\r\n            this._arr = [];\r\n            for (let index = 0; index < this.LineParent.numChildren; index++) {\r\n                const Line = this.LineParent.getChildAt(index);\r\n                if (Line.numChildren > 0) {\r\n                    let data = {};\r\n                    data['Line'] = Line;\r\n                    data[this._property.name] = Line.name;\r\n                    data[this._property.conditionNum] = Line.numChildren;\r\n                    data[this._property.degreeNum] = 0;\r\n                    this._arr.push(data);\r\n                }\r\n            }\r\n        }\r\n    }\r\n    _MakeTailor._TaskClothes = _TaskClothes;\r\n    class _Scissor extends Admin._ObjectBase {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.Ani = {\r\n                vnishP: new Laya.Point(Laya.stage.width + 500, 0),\r\n                shearSpeed: 3,\r\n                range: 40,\r\n                dir: 'up',\r\n                dirType: {\r\n                    up: 'up',\r\n                    down: 'down',\r\n                },\r\n                paly: () => {\r\n                    TimerAdmin._clearAll([this.Ani]);\r\n                    Animation2D._clearAll([this.Ani]);\r\n                    TimerAdmin._frameLoop(1, this.Ani, () => {\r\n                        if (this._SceneImg('S2').rotation > this.Ani.range) {\r\n                            this.Ani.dir = 'up';\r\n                        }\r\n                        else if (this._SceneImg('S2').rotation <= 0) {\r\n                            this.Ani.dir = 'down';\r\n                        }\r\n                        if (this.Ani.dir == 'up') {\r\n                            this._SceneImg('S1').rotation += this.Ani.shearSpeed * 4;\r\n                            this._SceneImg('S2').rotation -= this.Ani.shearSpeed * 4;\r\n                        }\r\n                        else if (this.Ani.dir == 'down') {\r\n                            this._SceneImg('S1').rotation -= this.Ani.shearSpeed;\r\n                            this._SceneImg('S2').rotation += this.Ani.shearSpeed;\r\n                        }\r\n                    });\r\n                },\r\n                stop: () => {\r\n                    TimerAdmin._frameOnce(30, this.Ani, () => {\r\n                        let time = 100;\r\n                        TimerAdmin._clearAll([this.Ani]);\r\n                        Animation2D._clearAll([this.Ani]);\r\n                        Animation2D.rotate(this._SceneImg('S1'), -this.Ani.range / 3, time);\r\n                        Animation2D.rotate(this._SceneImg('S2'), this.Ani.range / 3, time);\r\n                    });\r\n                },\r\n                event: () => {\r\n                    this._evReg(_Event.scissorAppear, () => {\r\n                        let time = 800;\r\n                        Animation2D.move_rotate(this._Owner, this._fRotation + 360, this._fPoint, time, 0, () => {\r\n                            this._Owner.rotation = this._fRotation;\r\n                            this.Move.switch = true;\r\n                        });\r\n                    });\r\n                    this._evReg(_Event.scissorPlay, () => {\r\n                        this.Ani.paly();\r\n                    });\r\n                    this._evReg(_Event.scissorStop, () => {\r\n                        this.Ani.stop();\r\n                    });\r\n                    this._evReg(_Event.scissorRemove, (func) => {\r\n                        this.Move.switch = false;\r\n                        let disX = 1500;\r\n                        let disY = -600;\r\n                        let time = 600;\r\n                        let delay = 100;\r\n                        Animation2D.move_rotate(this._Owner, this._Owner.rotation + 360, new Laya.Point(Laya.stage.width / 2, Laya.stage.height / 2), time / 2, delay, () => {\r\n                            this._Owner.rotation = 0;\r\n                            Animation2D.move_rotate(this._Owner, -30, new Laya.Point(this._Owner.x - disX / 6, this._Owner.y - disY / 5), time / 2, delay * 1.5, () => {\r\n                                Animation2D.move_rotate(this._Owner, Tools._Number.randomOneHalf() == 0 ? 720 : -720, new Laya.Point(this._Owner.x + disX, this._Owner.y + disY), time, delay, () => {\r\n                                    func && func();\r\n                                    this._Owner.rotation = 0;\r\n                                    this._Owner.pos(this.Ani.vnishP.x, this.Ani.vnishP.y);\r\n                                });\r\n                            });\r\n                        });\r\n                    });\r\n                    this._evReg(_Event.scissorAgain, () => {\r\n                        Animation2D.move_rotate(this._Owner, this._fRotation, this._fPoint, 600, 100, () => {\r\n                            _TaskClothes._ins().again(this._Scene);\r\n                        });\r\n                    });\r\n                    this._evReg(_Event.scissorRotation, (rotate) => {\r\n                        TimerAdmin._clearAll([this._Owner]);\r\n                        const time = 10;\r\n                        let angle;\r\n                        if (Math.abs(rotate - this._Owner.rotation) < 180) {\r\n                            angle = rotate - this._Owner.rotation;\r\n                        }\r\n                        else {\r\n                            angle = -(360 - (rotate - this._Owner.rotation));\r\n                        }\r\n                        let unit = angle / time;\r\n                        TimerAdmin._frameNumLoop(1, time, this._Owner, () => {\r\n                            this._Owner.rotation += unit;\r\n                        });\r\n                    });\r\n                },\r\n                effcts: () => {\r\n                    for (let index = 0; index < 5; index++) {\r\n                        Effects._Particle._spray(this._Scene, this._point, [10, 30], null, [0, 360], [Effects._SkinUrl.三角形1], null, [20, 90], null, null, [1, 5], [0.1, 0.2], this._Owner.zOrder - 1);\r\n                    }\r\n                }\r\n            };\r\n            this.Move = {\r\n                switch: true,\r\n                touchP: null,\r\n                diffP: null,\r\n            };\r\n            this.state = 'none';\r\n        }\r\n        lwgOnAwake() {\r\n            this._Owner.pos(this.Ani.vnishP.x, this.Ani.vnishP.y);\r\n        }\r\n        lwgEvent() {\r\n            this.Ani.event();\r\n        }\r\n        lwgButton() {\r\n            this._btnFour(this._SceneImg('ScissorsMobile'), (e) => {\r\n                if (this.Move.switch) {\r\n                    this._evNotify(_Event.scissorPlay);\r\n                    this.Move.touchP = new Laya.Point(e.stageX, e.stageY);\r\n                }\r\n            }, (e) => {\r\n                if (this.Move.touchP && this.Move.switch) {\r\n                    this.Move.diffP = new Laya.Point(e.stageX - this.Move.touchP.x, e.stageY - this.Move.touchP.y);\r\n                    this._Owner.x += this.Move.diffP.x;\r\n                    this._Owner.y += this.Move.diffP.y;\r\n                    this.Move.touchP = new Laya.Point(e.stageX, e.stageY);\r\n                    this._evNotify(_Event.scissorPlay);\r\n                }\r\n            }, (e) => {\r\n                this._evNotify(_Event.scissorStop);\r\n                this.Move.touchP = null;\r\n            });\r\n        }\r\n        onTriggerEnter(other, _Owner) {\r\n            if (this.state == 'none' || this.state == other.owner.parent.name) {\r\n                if (!other['cut'] && this.Move.switch) {\r\n                    other['cut'] = true;\r\n                    this._evNotify(_Event.scissorPlay);\r\n                    this._evNotify(_Event.scissorStop);\r\n                    this.state = other.owner.parent.name;\r\n                    EventAdmin._notify(_Event.scissorTrigger, [other.owner]);\r\n                    this.Ani.effcts();\r\n                }\r\n            }\r\n        }\r\n        onTriggerExit(other, _Owner) {\r\n            if (this.state == other.owner.parent.name) {\r\n                this.state = 'none';\r\n            }\r\n        }\r\n    }\r\n    class _Item extends Admin._ObjectBase {\r\n        lwgButton() {\r\n            this._btnUp(this._Owner, () => {\r\n                if (this._Owner['_dataSource']['name'] !== _Clothes._ins()._pitchName) {\r\n                    _Clothes._ins()._setPitch(this._Owner['_dataSource']['name']);\r\n                    this._evNotify(_Event.changeClothes);\r\n                }\r\n            }, 'no');\r\n        }\r\n    }\r\n    class MakeTailor extends Admin._SceneBase {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.Navi = {\r\n                BtnAgain: null,\r\n                BtnBack: null,\r\n                time: 500,\r\n                delay: 800,\r\n                scale: 1.4,\r\n                btnAgainAppear: () => {\r\n                    if (!this.Navi.BtnAgain) {\r\n                        this.Navi.BtnAgain = Tools._Node.createPrefab(_Res._list.prefab2D.BtnAgain.prefab, this._Owner, [200, 79]);\r\n                        this._btnUp(this.Navi.BtnAgain, () => {\r\n                            this._evNotify(_Event.scissorRemove, [() => {\r\n                                    _TaskClothes._ins().again(this._Owner);\r\n                                }]);\r\n                            Click._switch = false;\r\n                            TimerAdmin._frameOnce(30, this, () => {\r\n                                this.Navi.appear(this.Navi.appearType.again);\r\n                                Click._switch = true;\r\n                            });\r\n                        });\r\n                    }\r\n                    Animation2D.bombs_Appear(this.Navi.BtnAgain, 0, 1, this.Navi.scale, 0, this.Navi.time / 3, this.Navi.time / 4, 0);\r\n                },\r\n                btnAgainVinish: () => {\r\n                    this.Navi.BtnAgain && Animation2D.bombs_Vanish(this.Navi.BtnAgain, 0, 0, 0, this.Navi.time / 1.5);\r\n                },\r\n                btnBackVinish: () => {\r\n                    Animation2D.bombs_Vanish(this.Navi.BtnBack, 0, 0, 0, this.Navi.time / 1.5);\r\n                },\r\n                btnBackAppear: () => {\r\n                    if (!this.Navi.BtnBack) {\r\n                        this.Navi.BtnBack = Tools._Node.createPrefab(_Res._list.prefab2D.BtnBack.prefab, this._Owner, [77, 79]);\r\n                        this._btnUp(this.Navi.BtnBack, () => {\r\n                            this._openScene('Start', true, true);\r\n                        });\r\n                    }\r\n                    Animation2D.bombs_Appear(this.Navi.BtnBack, 0, 1, this.Navi.scale, 0, this.Navi.time / 3, this.Navi.time / 4);\r\n                },\r\n                appearType: {\r\n                    first: 'first',\r\n                    again: 'again',\r\n                },\r\n                appear: (type) => {\r\n                    this.Navi.btnAgainVinish();\r\n                    Animation2D.move(this._ImgVar('Navi'), Laya.stage.width - this._ImgVar('Navi').width - 100, 0, this.Navi.time, () => {\r\n                        Animation2D.move(this._ImgVar('Navi'), Laya.stage.width - this._ImgVar('Navi').width, 0, this.Navi.time / 4, () => {\r\n                            this._ImgVar('BtnChoose').visible = true;\r\n                            Animation2D.bombs_Appear(this._ImgVar('BtnChoose'), 0, 1, this.Navi.scale, 0, this.Navi.time / 3, this.Navi.time / 4, 200, () => {\r\n                                if (type == this.Navi.appearType.first) {\r\n                                    this.Navi.btnBackAppear();\r\n                                }\r\n                                else {\r\n                                }\r\n                            });\r\n                        });\r\n                    }, this.Navi.delay);\r\n                },\r\n                vinish: () => {\r\n                    Animation2D.bombs_Vanish(this._ImgVar('BtnChoose'), 0, 0, 0, this.Navi.time / 1.5, this.Navi.delay - 700, () => {\r\n                        this._evNotify(_Event.scissorAppear);\r\n                        Animation2D.move(this._ImgVar('Navi'), this._ImgVar('Navi').x - 80, 0, this.Navi.time / 2, () => {\r\n                            this.Navi.btnAgainAppear();\r\n                            Animation2D.move(this._ImgVar('Navi'), Laya.stage.width + 500, 0, this.Navi.time);\r\n                        });\r\n                    });\r\n                },\r\n                btn: () => {\r\n                    this._btnUp(this._ImgVar('BtnChoose'), () => {\r\n                        this.Navi.vinish();\r\n                    });\r\n                }\r\n            };\r\n            this.completeEffc = {\r\n                ani1: () => {\r\n                    this._AniVar('complete').play(0, false);\r\n                    let _caller = {};\r\n                    TimerAdmin._frameLoop(1, _caller, () => {\r\n                        let gP = this._ImgVar('EFlower').parent.localToGlobal(new Laya.Point(this._ImgVar('EFlower').x, this._ImgVar('EFlower').y));\r\n                        Effects._Particle._fallingVertical(this._Owner, new Laya.Point(gP.x, gP.y - 40), [0, 0], null, null, [0, 360], [Effects._SkinUrl.花2], [[255, 222, 0, 1], [255, 222, 0, 1]], null, [100, 200], [0.8, 1.5], [0.05, 0.1]);\r\n                        Effects._Particle._fallingVertical(this._Owner, new Laya.Point(gP.x, gP.y), [0, 0], null, null, [0, 360], [Effects._SkinUrl.花2], [[255, 222, 0, 1], [255, 24, 0, 1]], null, [100, 200], [0.8, 1.5], [0.05, 0.1]);\r\n                    });\r\n                    this._AniVar('complete').on(Laya.Event.COMPLETE, this, () => {\r\n                        TimerAdmin._clearAll([_caller]);\r\n                    });\r\n                },\r\n                ani2: () => {\r\n                    let num = 6;\r\n                    let spcaing = 20;\r\n                    for (let index = 0; index < num; index++) {\r\n                        let moveY = 7 * index + 5;\r\n                        let p1 = new Laya.Point(-200, Laya.stage.height);\r\n                        let _caller = {};\r\n                        let funcL = () => {\r\n                            p1.x += spcaing;\r\n                            if (p1.x > Laya.stage.width) {\r\n                                Laya.timer.clearAll(_caller);\r\n                            }\r\n                            p1.y -= moveY;\r\n                            Effects._Particle._fallingVertical(this._Owner, new Laya.Point(p1.x, p1.y), [0, 0], null, null, [0, 360], [Effects._SkinUrl.花2], [[255, 222, 0, 1], [255, 24, 0, 1]], null, [100, 200], [0.8, 1.5], [0.05, 0.1]);\r\n                        };\r\n                        TimerAdmin._frameLoop(2, _caller, () => {\r\n                            funcL();\r\n                        });\r\n                        let p2 = new Laya.Point(Laya.stage.width + 200, Laya.stage.height);\r\n                        let _callerR = {};\r\n                        let funcR = () => {\r\n                            p2.x -= spcaing;\r\n                            if (p2.x < 0) {\r\n                                Laya.timer.clearAll(_callerR);\r\n                            }\r\n                            p2.y -= moveY;\r\n                            Effects._Particle._fallingVertical(this._Owner, new Laya.Point(p2.x, p2.y), [0, 0], null, null, [0, 360], [Effects._SkinUrl.花2], [[255, 222, 0, 1], [255, 24, 0, 1]], null, [100, 200], [0.8, 1.5], [0.05, 0.1]);\r\n                        };\r\n                        TimerAdmin._frameLoop(2, _callerR, () => {\r\n                            funcR();\r\n                        });\r\n                    }\r\n                },\r\n                ani3: () => {\r\n                    let len = Laya.stage.width;\r\n                    let _height = Laya.stage.height * 2.5;\r\n                    let Img = new Laya.Image;\r\n                    Img.width = 100;\r\n                    Img.height = _height;\r\n                    Img.rotation = 40;\r\n                    Tools._Node.changePivot(Img, 0, _height / 2);\r\n                    Img.pos(0, 0);\r\n                    Laya.stage.addChild(Img);\r\n                    Img.zOrder = 1000;\r\n                    let num = 20;\r\n                    let spcaing = 40;\r\n                    for (let index = 0; index < num; index++) {\r\n                        let p1 = new Laya.Point(0, Img.height / num * index);\r\n                        let p2 = new Laya.Point(Laya.stage.width, Img.height / num * index);\r\n                        let _caller = {};\r\n                        let func = () => {\r\n                            p1.x += spcaing;\r\n                            if (p1.x > len) {\r\n                                Laya.timer.clearAll(_caller);\r\n                            }\r\n                            p2.x -= spcaing;\r\n                            if (p2.x > len) {\r\n                                Laya.timer.clearAll(_caller);\r\n                            }\r\n                            if (index % 2 == 0) {\r\n                                Effects._Particle._fallingVertical(Img, new Laya.Point(p1.x, p1.y), [0, 0], null, null, [0, 360], [Effects._SkinUrl.星星8], [[255, 222, 0, 1], [255, 24, 0, 1]], null, [100, 200], [0.8, 1.5], [0.05, 0.1]);\r\n                            }\r\n                            else {\r\n                                Effects._Particle._fallingVertical_Reverse(Img, new Laya.Point(p2.x, p2.y), [0, 0], null, null, [0, 360], [Effects._SkinUrl.星星8], [[255, 222, 0, 1], [255, 24, 0, 1]], null, [-100, -200], [-0.8, -1.5], [-0.05, -0.1]);\r\n                            }\r\n                        };\r\n                        TimerAdmin._frameNumLoop(2, 50, _caller, () => {\r\n                            func();\r\n                        });\r\n                    }\r\n                }\r\n            };\r\n        }\r\n        lwgOnAwake() {\r\n            this._ImgVar('Scissor').addComponent(_Scissor);\r\n            _Clothes._ins()._List = this._ListVar('List');\r\n            _Clothes._ins()._listrender = (Cell, index) => {\r\n                const data = Cell.dataSource;\r\n                const Icon = Cell.getChildByName('Icon');\r\n                Icon.skin = `Game/UI/Clothes/Icon/${data['name']}.png`;\r\n                const Board = Cell.getChildByName('Board');\r\n                Board.skin = `Lwg/UI/ui_orthogon_green.png`;\r\n                if (data[_Clothes._ins()._property.pitch]) {\r\n                    Board.skin = `Lwg/UI/ui_l_orthogon_green.png`;\r\n                }\r\n                else {\r\n                    Board.skin = `Lwg/UI/ui_orthogon_grass.png`;\r\n                }\r\n                if (!Cell.getComponent(_Item)) {\r\n                    Cell.addComponent(_Item);\r\n                }\r\n            };\r\n        }\r\n        lwgAdaptive() {\r\n            this._ImgVar('Navi').x = Laya.stage.width + 500;\r\n            this._ImgVar('BtnChoose').visible = false;\r\n        }\r\n        lwgOpenAniAfter() {\r\n            this.Navi.appear(this.Navi.appearType.first);\r\n        }\r\n        lwgOnStart() {\r\n            _TaskClothes._ins().changeClothes(this._Owner);\r\n        }\r\n        lwgEvent() {\r\n            this._evReg(_Event.changeClothes, () => {\r\n                _TaskClothes._ins().changeClothes(this._Owner);\r\n            });\r\n            this._evReg(_Event.scissorTrigger, (Dotted) => {\r\n                const value = _TaskClothes._ins()._checkCondition(Dotted.parent.name);\r\n                Dotted.visible = false;\r\n                if (value) {\r\n                    for (let index = 0; index < _TaskClothes._ins().Clothes.getChildAt(0).numChildren; index++) {\r\n                        const element = _TaskClothes._ins().Clothes.getChildAt(0).getChildAt(index);\r\n                        if (element.name.substr(5, 2) == Dotted.parent.name.substr(4, 2)) {\r\n                            let time = 1500;\r\n                            let disX = Tools._Number.randomOneInt(1000) + 1000;\r\n                            let disY = Tools._Number.randomOneInt(1000) + 1000;\r\n                            switch (element.name.substr(8)) {\r\n                                case 'U':\r\n                                    disX = 0;\r\n                                    disY = -disY;\r\n                                    break;\r\n                                case 'LU':\r\n                                    disX = -disX;\r\n                                    disY = -disY;\r\n                                    break;\r\n                                case 'RU':\r\n                                    disY = -disY;\r\n                                    break;\r\n                                case 'D':\r\n                                    disX = 0;\r\n                                    break;\r\n                                case 'RD':\r\n                                    break;\r\n                                case 'LD':\r\n                                    disX = -disX;\r\n                                    break;\r\n                                default:\r\n                                    break;\r\n                            }\r\n                            Animation2D.move_rotate(element, 0, new Laya.Point(element.x + disX / 30, element.y + disY / 30), time / 6, 0, () => {\r\n                                let rotate1 = Tools._Number.randomOneBySection(180);\r\n                                let rotate2 = Tools._Number.randomOneBySection(-180);\r\n                                Animation2D.move_rotate(element, Tools._Number.randomOneHalf() == 0 ? rotate1 : rotate2, new Laya.Point(element.x + disX, element.y + disY), time, 0, () => {\r\n                                    Animation2D.fadeOut(element, 1, 0, 200);\r\n                                });\r\n                            });\r\n                        }\r\n                    }\r\n                    if (_TaskClothes._ins()._checkAllCompelet()) {\r\n                        Tools._Node.removeAllChildren(_TaskClothes._ins().LineParent);\r\n                        this._evNotify(_Event.scissorRemove);\r\n                        TimerAdmin._frameOnce(100, this, () => {\r\n                            this._evNotify(_Event.completeEffc);\r\n                        });\r\n                        TimerAdmin._frameOnce(280, this, () => {\r\n                            this._openScene('MakeClothes', true, true);\r\n                        });\r\n                    }\r\n                }\r\n                let gPos = Dotted.parent.localToGlobal(new Laya.Point(Dotted.x, Dotted.y));\r\n                if (Dotted.name == 'A') {\r\n                    if (this._ImgVar('Scissor').x <= gPos.x) {\r\n                        this._evNotify(_Event.scissorRotation, [Dotted.rotation]);\r\n                    }\r\n                    else {\r\n                        this._evNotify(_Event.scissorRotation, [180 + Dotted.rotation]);\r\n                    }\r\n                }\r\n                else {\r\n                    if (this._ImgVar('Scissor').y >= gPos.y) {\r\n                        this._evNotify(_Event.scissorRotation, [Dotted.rotation]);\r\n                    }\r\n                    else {\r\n                        this._evNotify(_Event.scissorRotation, [180 + Dotted.rotation]);\r\n                    }\r\n                }\r\n            });\r\n            this._evReg(_Event.completeEffc, () => {\r\n                this.Navi.btnBackVinish();\r\n                this.Navi.btnAgainVinish();\r\n                this.completeEffc.ani3();\r\n            });\r\n        }\r\n        lwgButton() {\r\n            this.Navi.btn();\r\n        }\r\n    }\r\n    _MakeTailor.MakeTailor = MakeTailor;\r\n})(_MakeTailor || (_MakeTailor = {}));\r\n",
  "references": [
    "D:/Game/project/3DDressUp/Project_Laya2.9.0/3DDressUp_Laya2.9.0/3DDressUp_Laya2.9.0/src/script/Lwg/Lwg.ts",
    "D:/Game/project/3DDressUp/Project_Laya2.9.0/3DDressUp_Laya2.9.0/3DDressUp_Laya2.9.0/src/script/Lwg/_PreLoad.ts"
  ]
}
