{
  "code": "import { Admin, EventAdmin, Tools } from \"./Lwg\";\r\nimport { lwg3D } from \"./Lwg3D\";\r\nimport { _Res } from \"./_PreLoad\";\r\nexport var _MakeClothes;\r\n(function (_MakeClothes) {\r\n    let _Event;\r\n    (function (_Event) {\r\n        _Event[\"addTexture2D\"] = \"_MakeClothes_addTexture2D\";\r\n        _Event[\"rotateHanger\"] = \"_MakeClothes_rotateHanger\";\r\n    })(_Event = _MakeClothes._Event || (_MakeClothes._Event = {}));\r\n    class MakeClothes extends Admin._SceneBase {\r\n        constructor() {\r\n            super(...arguments);\r\n            this.TexControl = {\r\n                Img: null,\r\n                DisplayImg: null,\r\n                touchP: null,\r\n                diffP: null,\r\n                state: 'none',\r\n                stateType: {\r\n                    move: 'move',\r\n                    scale: 'scale',\r\n                    rotate: 'rotate',\r\n                    none: 'none',\r\n                },\r\n                createImg: (element) => {\r\n                    this.TexControl.Img = Tools._Node.simpleCopyImg(element);\r\n                    this.TexControl.Img.skin = `${element.skin.substr(0, element.skin.length - 7)}.png`;\r\n                    this._SpriteVar('Ultimately').addChild(this.TexControl.Img);\r\n                    let lPoint = Tools._Point.getOtherLocal(element, this._SpriteVar('UltimatelyParent'));\r\n                    this.TexControl.Img.pos(lPoint.x, lPoint.y);\r\n                    this.TexControl.DisplayImg = Tools._Node.simpleCopyImg(element);\r\n                    this.TexControl.DisplayImg.skin = `${element.skin.substr(0, element.skin.length - 7)}.png`;\r\n                    this.TexControl.DisplayImg.pos(lPoint.x, lPoint.y);\r\n                    this._SpriteVar('Dispaly').addChild(this.TexControl.DisplayImg);\r\n                    this.TexControl.Img.width = this.TexControl.DisplayImg.width = 128;\r\n                    this.TexControl.Img.height = this.TexControl.DisplayImg.height = 128;\r\n                    this.TexControl.restore();\r\n                },\r\n                getTex: () => {\r\n                    return this._ImgVar('Ultimately').drawToTexture(this._ImgVar('Ultimately').width, this._ImgVar('Ultimately').height, this._ImgVar('Ultimately').x, this._ImgVar('Ultimately').y + this._ImgVar('Ultimately').height);\r\n                },\r\n                move: (e) => {\r\n                    if (this.TexControl.touchP && this.TexControl.Img) {\r\n                        this.TexControl.diffP = new Laya.Point(e.stageX - this.TexControl.touchP.x, e.stageY - this.TexControl.touchP.y);\r\n                        this.TexControl.Img.x += this.TexControl.diffP.x;\r\n                        this.TexControl.Img.y += this.TexControl.diffP.y;\r\n                        this.TexControl.DisplayImg.x += this.TexControl.diffP.x;\r\n                        this.TexControl.DisplayImg.y += this.TexControl.diffP.y;\r\n                        this.TexControl.touchP = new Laya.Point(e.stageX, e.stageY);\r\n                        let gPoint = this._SpriteVar('Dispaly').localToGlobal(new Laya.Point(this.TexControl.DisplayImg.x, this.TexControl.DisplayImg.y));\r\n                        this._ImgVar('Wireframe').pos(gPoint.x, gPoint.y);\r\n                    }\r\n                },\r\n                scale: (e) => {\r\n                    let lPoint = this._ImgVar('Wireframe').globalToLocal(new Laya.Point(e.stageX, e.stageY));\r\n                    this._ImgVar('WConversion').pos(lPoint.x, lPoint.y);\r\n                    this._ImgVar('Frame').width = Math.abs(lPoint.x);\r\n                    this._ImgVar('Frame').height = Math.abs(lPoint.y);\r\n                    let diffP = new Laya.Point(e.stageX - this._ImgVar('Wireframe').x, e.stageY - this._ImgVar('Wireframe').y);\r\n                    this.TexControl.Img.rotation = this.TexControl.DisplayImg.rotation = this._ImgVar('Wireframe').rotation = Tools._Point.pointByAngle(diffP.x, diffP.y) + 45;\r\n                    let scaleWidth = this._ImgVar('Frame').width - this._ImgVar('Wireframe').width;\r\n                    let scaleheight = this._ImgVar('Frame').height - this._ImgVar('Wireframe').height;\r\n                    this.TexControl.DisplayImg.width = this.TexControl.Img.width = 128 + scaleWidth;\r\n                    this.TexControl.DisplayImg.height = this.TexControl.Img.height = 128 + scaleheight;\r\n                    Tools._Node.changePovit(this.TexControl.Img, this.TexControl.Img.width / 2, this.TexControl.Img.height / 2);\r\n                    Tools._Node.changePovit(this.TexControl.DisplayImg, this.TexControl.DisplayImg.width / 2, this.TexControl.DisplayImg.height / 2);\r\n                },\r\n                rotate: (e) => {\r\n                },\r\n                checkDisplay: (e) => {\r\n                    if (this.TexControl.DisplayImg.x > -this.TexControl.DisplayImg.width && this.TexControl.DisplayImg.x < this._SpriteVar('Dispaly').width) {\r\n                        this.TexControl.DisplayImg.visible = false;\r\n                    }\r\n                    else {\r\n                        if (this.TexControl.DisplayImg.y > -this.TexControl.DisplayImg.height && this.TexControl.DisplayImg.y < this._SpriteVar('Dispaly').height) {\r\n                            this.TexControl.DisplayImg.visible = true;\r\n                        }\r\n                        else {\r\n                            this.TexControl.DisplayImg.visible = true;\r\n                        }\r\n                    }\r\n                    this._ImgVar('Wireframe').visible = !this.TexControl.DisplayImg.visible;\r\n                },\r\n                operation: (e) => {\r\n                    if (this.TexControl.state !== this.TexControl.stateType.none) {\r\n                        this.TexControl[this.TexControl.state](e);\r\n                        this.TexControl.checkDisplay(e);\r\n                        EventAdmin._notify(_Event.addTexture2D, [this.TexControl.getTex().bitmap]);\r\n                    }\r\n                },\r\n                restore: () => {\r\n                    this._ImgVar('Wireframe').rotation = 0;\r\n                    this._ImgVar('Wireframe').pivotX = this._ImgVar('Wireframe').width / 2;\r\n                    this._ImgVar('Wireframe').pivotY = this._ImgVar('Wireframe').height / 2;\r\n                    this._ImgVar('WConversion').x = this._ImgVar('Frame').width = this._ImgVar('Wireframe').width;\r\n                    this._ImgVar('WConversion').y = this._ImgVar('Frame').height = this._ImgVar('Wireframe').height;\r\n                    this._ImgVar('Wireframe').visible = false;\r\n                },\r\n                close: () => {\r\n                    this.TexControl.DisplayImg.destroy();\r\n                    this.TexControl.Img.destroy();\r\n                    this.TexControl.restore();\r\n                    this.TexControl.state = this.TexControl.stateType.none;\r\n                    EventAdmin._notify(_Event.addTexture2D, [this.TexControl.getTex().bitmap]);\r\n                },\r\n                btn: () => {\r\n                    for (let index = 0; index < this._ImgVar('Figure').numChildren; index++) {\r\n                        const element = this._ImgVar('Figure').getChildAt(index);\r\n                        this._btnDown(element, (e) => {\r\n                            if (!this[`FigureParentelement${index}`]) {\r\n                                this[`FigureParentelement${index}`] = true;\r\n                            }\r\n                            this.TexControl.state = this.TexControl.stateType.move;\r\n                            this.TexControl.createImg(element);\r\n                        });\r\n                    }\r\n                    this._btnFour(this._ImgVar('WConversion'), (e) => {\r\n                        this.TexControl.state = this.TexControl.stateType.scale;\r\n                    }, null, (e) => {\r\n                        this.TexControl.state = this.TexControl.stateType.move;\r\n                    });\r\n                    this._btnUp(this._ImgVar('WClose'), (e) => {\r\n                        this.TexControl.close();\r\n                    });\r\n                    this._btnDown(this._ImgVar('BtnLRotate'), (e) => {\r\n                    });\r\n                    this._btnDown(this._ImgVar('BtnRRotate'), (e) => {\r\n                    });\r\n                }\r\n            };\r\n        }\r\n        lwgOnAwake() {\r\n            _MakeClothes._Scene3D = _Res._list.scene3D.MakeScene.Scene;\r\n            if (!_MakeClothes._Scene3D.getComponent(MakeClothes3D)) {\r\n                _MakeClothes._Scene3D.addComponent(MakeClothes3D);\r\n            }\r\n        }\r\n        lwgAdaptive() {\r\n            this._adaptiveCenter([this._SpriteVar('UltimatelyParent'), this._SpriteVar('Dispaly')]);\r\n            this._adaptiveWidth([this._ImgVar('BtnRRotate'), this._ImgVar('BtnLRotate')]);\r\n        }\r\n        lwgBtnRegister() {\r\n            this.TexControl.btn();\r\n        }\r\n        onStageMouseDown(e) {\r\n            this.TexControl.touchP = new Laya.Point(e.stageX, e.stageY);\r\n        }\r\n        onStageMouseMove(e) {\r\n            this.TexControl.operation(e);\r\n        }\r\n        onStageMouseUp() {\r\n            this.TexControl.touchP = null;\r\n        }\r\n    }\r\n    _MakeClothes.MakeClothes = MakeClothes;\r\n    class MakeClothes3D extends lwg3D._Scene3DBase {\r\n        lwgOnAwake() {\r\n        }\r\n        lwgEventRegister() {\r\n            EventAdmin._register(_Event.addTexture2D, this, (Text2D) => {\r\n                let bMaterial = this._child('Hanger').meshRenderer.material;\r\n                bMaterial.albedoTexture.destroy();\r\n                bMaterial.albedoTexture = Text2D;\r\n            });\r\n            EventAdmin._register(_Event.rotateHanger, this, (num) => {\r\n                if (num) {\r\n                    this._childLocPos('Hanger').y++;\r\n                }\r\n                else {\r\n                    this._childLocPos('Hanger').x++;\r\n                }\r\n            });\r\n        }\r\n    }\r\n    _MakeClothes.MakeClothes3D = MakeClothes3D;\r\n})(_MakeClothes || (_MakeClothes = {}));\r\nexport default _MakeClothes.MakeClothes;\r\n",
  "references": [
    "D:/Game/project/3DDressUp/Project_Laya2.9.0/3DDressUp_Laya2.9.0/3DDressUp_Laya2.9.0/src/script/Lwg/Lwg.ts",
    "D:/Game/project/3DDressUp/Project_Laya2.9.0/3DDressUp_Laya2.9.0/3DDressUp_Laya2.9.0/src/script/Lwg/Lwg3D.ts",
    "D:/Game/project/3DDressUp/Project_Laya2.9.0/3DDressUp_Laya2.9.0/3DDressUp_Laya2.9.0/src/script/Lwg/_PreLoad.ts"
  ]
}
